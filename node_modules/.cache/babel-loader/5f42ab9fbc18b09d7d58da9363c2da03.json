{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\appl\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { LineLayer } from '@deck.gl/layers';\nimport { StaticMap } from 'react-map-gl';\nimport { AmbientLight, PointLight, LightingEffect } from '@deck.gl/core';\nimport { PolygonLayer } from '@deck.gl/layers';\nimport { TripsLayer } from '@deck.gl/geo-layers';\nimport { render } from 'react-dom'; // Add from deck.gl\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DATA_URL = {\n  BUILDINGS: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/trips/buildings.json',\n  // eslint-disable-line\n  TRIPS: 'datamein.json'\n};\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 10.0,\n  position: [-74.05, 40.7, 8000]\n});\nconst lightingEffect = new LightingEffect({\n  ambientLight,\n  pointLight\n});\nconst material = {\n  ambient: 0.1,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [60, 64, 70]\n};\nconst DEFAULT_THEME = {\n  buildingColor: [74, 80, 87],\n  trailColor0: [253, 128, 93],\n  trailColor1: [23, 184, 190],\n  material,\n  effects: [lightingEffect]\n}; //\n// Set your mapbox access token here\n\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoidXNlcnBhdiIsImEiOiJja24zZmhxODAwOGpoMnZvMGpnZmtrNnhiIn0.62IOjLEwae3VzgbXme8MNg'; // Viewport settings\n\nconst INITIAL_VIEW_STATE = {\n  longitude: 12.41669,\n  latitude: 46.41,\n  zoom: 13,\n  pitch: 30,\n  bearing: 0\n};\nconst MAP_STYLE = 'https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json'; // Data to be used by the LineLayer\n\nconst data = [{\n  sourcePosition: [-122.41669, 37.7853],\n  targetPosition: [-122.41669, 37.781]\n}];\n\nfunction App({\n  buildings = DATA_URL.BUILDINGS,\n  trips = DATA_URL.TRIPS,\n  trailLength = 180,\n  initialViewState = INITIAL_VIEW_STATE,\n  mapStyle = MAP_STYLE,\n  theme = DEFAULT_THEME,\n  loopLength = 1800,\n  // unit corresponds to the timestamp in source data\n  animationSpeed = 1\n}) {\n  _s();\n\n  const [time, setTime] = useState(0);\n  const [animation] = useState({});\n\n  const animate = () => {\n    setTime(t => (t + animationSpeed) % loopLength);\n    animation.id = window.requestAnimationFrame(animate);\n  }; // eslint-disable-next-line no-undef\n\n\n  useEffect(() => {\n    animation.id = window.requestAnimationFrame(animate);\n    return () => window.cancelAnimationFrame(animation.id);\n  }, [animation]);\n  const layers = [// This is only needed when using shadow effects\n  new PolygonLayer({\n    id: 'ground',\n    data: landCover,\n    getPolygon: f => f,\n    stroked: false,\n    getFillColor: [0, 0, 0, 0]\n  }), new TripsLayer({\n    id: 'trips',\n    data: trips,\n    getPath: d => d.path,\n    getTimestamps: d => d.timestamps,\n    getColor: d => d.vendor === 0 ? theme.trailColor0 : theme.trailColor1,\n    opacity: 0.8,\n    widthMinPixels: 2,\n    rounded: true,\n    trailLength,\n    currentTime: time,\n    shadowEnabled: false\n  }), new PolygonLayer({\n    id: 'buildings',\n    data: buildings,\n    extruded: true,\n    wireframe: true,\n    opacity: 0.5,\n    getPolygon: f => f.polygon,\n    getElevation: f => f.height,\n    getFillColor: theme.buildingColor,\n    material: theme.material\n  })];\n  return /*#__PURE__*/_jsxDEV(DeckGL, {\n    layers: layers,\n    effects: theme.effects,\n    initialViewState: initialViewState,\n    controller: true,\n    children: /*#__PURE__*/_jsxDEV(StaticMap, {\n      reuseMaps: true,\n      mapStyle: mapStyle,\n      preventStyleDiffing: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"uMfl71cmdRtzLNiGOHW0DidA1JA=\");\n\n_c = App;\nexport default App;\n/*\nimport React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {LineLayer} from '@deck.gl/layers';\nimport {StaticMap} from 'react-map-gl';\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\nimport {TripsLayer} from '@deck.gl/geo-layers';\n\nimport {render} from 'react-dom';\n\n// Add from deck.gl\n\nconst DATA_URL = {\n  BUILDINGS:\n      'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/trips/buildings.json', // eslint-disable-line\n  TRIPS: 'datamein.json'\n};\n\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\n\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 10.0,\n  position: [-74.05, 40.7, 8000]\n});\n\n\nconst lightingEffect = new LightingEffect({ambientLight, pointLight});\n\nconst material = {\n  ambient: 0.1,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [60, 64, 70]\n};\n\nconst DEFAULT_THEME = {\n  buildingColor: [74, 80, 87],\n  trailColor0: [253, 128, 93],\n  trailColor1: [23, 184, 190],\n  material,\n  effects: [lightingEffect]\n};\n//\n\n\n\n// Set your mapbox access token here\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoidXNlcnBhdiIsImEiOiJja24zZmhxODAwOGpoMnZvMGpnZmtrNnhiIn0.62IOjLEwae3VzgbXme8MNg';\n\n// Viewport settings\nconst INITIAL_VIEW_STATE = {\n  longitude: 12.41669,\n  latitude: 46.41,\n  zoom: 13,\n  pitch: 30,\n  bearing: 0\n};\n\n// Data to be used by the LineLayer\nconst data = [\n  {sourcePosition: [-122.41669, 37.7853], targetPosition: [-122.41669, 37.781]}\n];\n\nfunction App({data}) {\n  const layers = [\n    new LineLayer({id: 'line-layer', data})\n  ];\n\n  return (\n      <DeckGL\n          initialViewState={INITIAL_VIEW_STATE}\n          controller={true}\n          layers={layers}\n      >\n        <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n      </DeckGL>\n  );\n}\nexport default App;\n*/\n\n/*\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/React/appl/src/App.js"],"names":["React","useState","useEffect","DeckGL","LineLayer","StaticMap","AmbientLight","PointLight","LightingEffect","PolygonLayer","TripsLayer","render","DATA_URL","BUILDINGS","TRIPS","ambientLight","color","intensity","pointLight","position","lightingEffect","material","ambient","diffuse","shininess","specularColor","DEFAULT_THEME","buildingColor","trailColor0","trailColor1","effects","MAPBOX_ACCESS_TOKEN","INITIAL_VIEW_STATE","longitude","latitude","zoom","pitch","bearing","MAP_STYLE","data","sourcePosition","targetPosition","App","buildings","trips","trailLength","initialViewState","mapStyle","theme","loopLength","animationSpeed","time","setTime","animation","animate","t","id","window","requestAnimationFrame","cancelAnimationFrame","layers","landCover","getPolygon","f","stroked","getFillColor","getPath","d","path","getTimestamps","timestamps","getColor","vendor","opacity","widthMinPixels","rounded","currentTime","shadowEnabled","extruded","wireframe","polygon","getElevation","height"],"mappings":"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IAAA,gBAAgB,EAAEgB,gBAHtB;AAII,IAAA,UAAU,EAAE,IAJhB;AAAA,2BAME,QAAC,SAAD;AAAW,MAAA,SAAS,MAApB;AAAqB,MAAA,QAAQ,EAAEC,QAA/B;AAAyC,MAAA,mBAAmB,EAAE;AAA9D;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADJ;AAUD;;GAzEQL,G;;KAAAA,G;AA0ET,eAAeA,GAAf;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {LineLayer} from '@deck.gl/layers';\nimport {StaticMap} from 'react-map-gl';\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\nimport {TripsLayer} from '@deck.gl/geo-layers';\n\nimport {render} from 'react-dom';\n\n// Add from deck.gl\n\nconst DATA_URL = {\n  BUILDINGS:\n      'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/trips/buildings.json', // eslint-disable-line\n  TRIPS: 'datamein.json'\n};\n\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\n\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 10.0,\n  position: [-74.05, 40.7, 8000]\n});\n\n\nconst lightingEffect = new LightingEffect({ambientLight, pointLight});\n\nconst material = {\n  ambient: 0.1,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [60, 64, 70]\n};\n\nconst DEFAULT_THEME = {\n  buildingColor: [74, 80, 87],\n  trailColor0: [253, 128, 93],\n  trailColor1: [23, 184, 190],\n  material,\n  effects: [lightingEffect]\n};\n//\n\n\n\n// Set your mapbox access token here\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoidXNlcnBhdiIsImEiOiJja24zZmhxODAwOGpoMnZvMGpnZmtrNnhiIn0.62IOjLEwae3VzgbXme8MNg';\n\n// Viewport settings\nconst INITIAL_VIEW_STATE = {\n  longitude: 12.41669,\n  latitude: 46.41,\n  zoom: 13,\n  pitch: 30,\n  bearing: 0\n};\n\nconst MAP_STYLE = 'https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json';\n\n\n// Data to be used by the LineLayer\nconst data = [\n  {sourcePosition: [-122.41669, 37.7853], targetPosition: [-122.41669, 37.781]}\n];\n\nfunction App({\n               buildings = DATA_URL.BUILDINGS,\n               trips = DATA_URL.TRIPS,\n               trailLength = 180,\n               initialViewState = INITIAL_VIEW_STATE,\n               mapStyle = MAP_STYLE,\n               theme = DEFAULT_THEME,\n               loopLength = 1800, // unit corresponds to the timestamp in source data\n               animationSpeed = 1\n             }) {\n  const [time, setTime] = useState(0);\n  const [animation] = useState({});\n\n  const animate = () => {\n    setTime(t => (t + animationSpeed) % loopLength);\n    animation.id = window.requestAnimationFrame(animate);\n  };\n\n  // eslint-disable-next-line no-undef\n  useEffect(\n      () => {\n        animation.id = window.requestAnimationFrame(animate);\n        return () => window.cancelAnimationFrame(animation.id);\n      },\n      [animation]\n  );\n\n  const layers = [\n    // This is only needed when using shadow effects\n    new PolygonLayer({\n      id: 'ground',\n      data: landCover,\n      getPolygon: f => f,\n      stroked: false,\n      getFillColor: [0, 0, 0, 0]\n    }),\n    new TripsLayer({\n      id: 'trips',\n      data: trips,\n      getPath: d => d.path,\n      getTimestamps: d => d.timestamps,\n      getColor: d => (d.vendor === 0 ? theme.trailColor0 : theme.trailColor1),\n      opacity: 0.8,\n      widthMinPixels: 2,\n      rounded: true,\n      trailLength,\n      currentTime: time,\n\n      shadowEnabled: false\n    }),\n    new PolygonLayer({\n      id: 'buildings',\n      data: buildings,\n      extruded: true,\n      wireframe: true,\n      opacity: 0.5,\n      getPolygon: f => f.polygon,\n      getElevation: f => f.height,\n      getFillColor: theme.buildingColor,\n      material: theme.material\n    })\n  ];\n\n  return (\n      <DeckGL\n          layers={layers}\n          effects={theme.effects}\n          initialViewState={initialViewState}\n          controller={true}\n      >\n        <StaticMap reuseMaps mapStyle={mapStyle} preventStyleDiffing={true} />\n      </DeckGL>\n  );\n}\nexport default App;\n\n\n\n\n\n\n\n/*\nimport React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {LineLayer} from '@deck.gl/layers';\nimport {StaticMap} from 'react-map-gl';\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\nimport {TripsLayer} from '@deck.gl/geo-layers';\n\nimport {render} from 'react-dom';\n\n// Add from deck.gl\n\nconst DATA_URL = {\n  BUILDINGS:\n      'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/trips/buildings.json', // eslint-disable-line\n  TRIPS: 'datamein.json'\n};\n\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\n\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 10.0,\n  position: [-74.05, 40.7, 8000]\n});\n\n\nconst lightingEffect = new LightingEffect({ambientLight, pointLight});\n\nconst material = {\n  ambient: 0.1,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [60, 64, 70]\n};\n\nconst DEFAULT_THEME = {\n  buildingColor: [74, 80, 87],\n  trailColor0: [253, 128, 93],\n  trailColor1: [23, 184, 190],\n  material,\n  effects: [lightingEffect]\n};\n//\n\n\n\n// Set your mapbox access token here\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoidXNlcnBhdiIsImEiOiJja24zZmhxODAwOGpoMnZvMGpnZmtrNnhiIn0.62IOjLEwae3VzgbXme8MNg';\n\n// Viewport settings\nconst INITIAL_VIEW_STATE = {\n  longitude: 12.41669,\n  latitude: 46.41,\n  zoom: 13,\n  pitch: 30,\n  bearing: 0\n};\n\n// Data to be used by the LineLayer\nconst data = [\n  {sourcePosition: [-122.41669, 37.7853], targetPosition: [-122.41669, 37.781]}\n];\n\nfunction App({data}) {\n  const layers = [\n    new LineLayer({id: 'line-layer', data})\n  ];\n\n  return (\n      <DeckGL\n          initialViewState={INITIAL_VIEW_STATE}\n          controller={true}\n          layers={layers}\n      >\n        <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n      </DeckGL>\n  );\n}\nexport default App;\n*/\n\n\n/*\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n*/\n\n"]},"metadata":{},"sourceType":"module"}